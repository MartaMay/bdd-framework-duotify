BBD Framework Building Steps:

1. Create a maven project
2. Add the necessary dependencies
3. Add 3 Cucumber specific dependencies: cucumber-java, cucumber-core, cucumber-junit
4. Add .gitignore
5. Create the package structure (runner, stepdefinitions, resources)
6. Add the necessary utilities and .property files
7. Add the feature file and scenarios
8. Add the step definition class
9. Generate the step definition snippets
10. Implement the code for each step definition
11. Run the scenario by tagging it with a tag
12.


In Cucumber framework:
  - the test scenarios are put in a feature file which are usually are created under resources folder
  - the feature file scenario steps are connected to step definitions through @CucumberOptions "glue" option in Runner class
  - Cucumber scenario step is matched to step definition method using the text of the scenario step either with Regular Expressions or Cucumber Expressions
  - tags is the primary way to control what scenario or feature files to run
  - Background -> the common steps for ALL scenarios of a feature file can be moved to Background steps

  - Hooks -> Step definition methods annotated with @Before and @After that are executed before/after each SCENARIO. The annotated methods can be added into any class under Step Definitions folder but usually added into a separate class called Hooks
    -Cucumber offers 3 types of Hooks:
     - @Before @After - > each scenario
     - @BeforeStep @AfterStep -> each step of scenario
     - @BeforeAll @AfterAll -> all scenarios



Reporting in Cucumber Framework

- Cucumber comes with its own built-in HTML report. To enable it, we need to add the HTML plugin with the path to the file in @CucumberOptions
   e.g    plugin = {"html:target/basic-report/report.html"}
- We can also enable the web based version of the same report  by adding publish=true option

How did you implement taking a screenshot on failure in Cucumber?
- In @After hook, we used Scenario class and checked if scenario is failed,
  and took a screenshot with Selenium and attached the screenshot file with Scenario class's attach method.
  e.g.:
   if(scenario.isFailed()){
              scenario.attach(((TakesScreenshot) Driver.getDriver()).getScreenshotAs(OutputType.BYTES), "image/png", "failed");
          }

Pretty plugin adds more detailed step description and logs on the console and makes debugging easier. To enable it:
    plugin = {"pretty"};

Step Notifications option adds detailed step status on the junit runner report to see a detailed overview of each step's pass/fail status

Run Cucumber Tests through command line:

- Configure Maven Surefire plugin in pom.xml to indicate the runner class:
   <build>
           <pluginManagement>
               <plugins>
                   <plugin>
                       <groupId>org.apache.maven.plugins</groupId>
                       <artifactId>maven-surefire-plugin</artifactId>
                       <version>3.2.5</version>
                       <configuration>
                           <includes>CucumberRunner.java</includes>
                       </configuration>
                   </plugin>
               </plugins>
           </pluginManagement>
       </build>

- Run tests with mvn test command.

How to run scenarios with specific tag/s through CMD in Cucumber?

mvn test -D cucumber.filter.tags="@positive"
mvn test -D cucumber.filter.tags="@positive and @smoke"
mvn test -D cucumber.filter.tags="@positive or @smoke"

When you pass the tags through CMD with -D cucumber.filter.tags, it will override the Runner class's tags.

Cucumber parametrized step enables the step to be used multiple times with different sets of data and prevents multiple step snippet generation

  Cucumber automatically converts matching types (String, int,double) from scenario step into corresponding parameter({string},{int},{double}) and adds it to a snippet method as a parameter:
  Ex:
      Scenario Step:           Given I have 5 pounds of cucumbers of type "Cuke" that cost me 5.99 dollars

      Generated snippet:        @Given("I have {int} pounds of cucumbers of type {string} that cost me {double} dollars")
                                public void i_have_pounds_of_cucumbers_of_type_that_cost_me_dollars(Integer int1, String string, Double double1) {

                                }

 If you need to specify information in a scenario that won't fit on a single line, you can use a DocString. (""" """)
       When you use a doctring make sure to put each triple quote on its own line.
       Ex: Scenario: Example scenario for Database
           When I send the following query
             """
                select first_name,last_name,email,address,district,city,country from customer
                join address
                on customer.address_id = address.address_id
                join city
                on address.city_id  = city.city_id
                join country
                on city.country_id = country.country_id;
              """

   Cucumber Data Table - a cucumber feature that enables table-style data/collection to be passed from a SINGLE step of a Cucumber scenario into the step definition method
                Example:
                Given the user is on the homepage of the music streaming app
                    When the user clicks on the “Browse” link in the sidebar
                    Then the following albums should be displayed
                      | Cruel Summer        |
                      | Fenix               |
                      | Werk                |
                      | Marisa              |
                      | Escape              |
                      | Ultimatum           |
                      | Oscillation         |
                      | Clouds              |
                      | I Am...Sasha Fierce |

        The DataTable is added to the cucumber step definition method as a parameter, we simply need to replace it with corresponding Java data structure for automatic transformation.
        The allowed types are List<E>, List<List<E>>, List<Map<K,V>>, Map<K,V>  Map<K, List<V>> where E,K,V must be a String, Integer, Float, Double, Byte, Short, Long.
        When Cucumber converts the DataTable into corresponding Java data structures (List, Map), it creates an unmodifiable version of these data structures. If you need to modify, you need to convert into a modifiable type.



