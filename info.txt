BBD Framework Building Steps:

1. Create a maven project
2. Add the necessary dependencies
3. Add 3 Cucumber specific dependencies: cucumber-java, cucumber-core, cucumber-junit
4. Add .gitignore
5. Create the package structure (runner, stepdefinitions, resources)
6. Add the necessary utilities and .property files
7. Add the feature file and scenarios
8. Add the step definition class
9. Generate the step definition snippets
10. Implement the code for each step definition
11. Run the scenario by tagging it with a tag
12. Repeat steps 7-11


In Cucumber framework:
  - the test scenarios are put in a feature file which are usually are created under resources folder
  - the feature file scenario steps are connected to step definitions through @CucumberOptions "glue" option in Runner class
  - Cucumber scenario step is matched to step definition method using the text of the scenario step either with Regular Expressions or Cucumber Expressions
  - tags is the primary way to control what scenario or feature files to run
  - Background -> the common steps for ALL scenarios of a feature file can be moved to Background steps

  - Hooks -> Step definition methods annotated with @Before and @After that are executed before/after each SCENARIO. The annotated methods can be added into any class under Step Definitions folder but usually added into a separate class called Hooks
    -Cucumber offers 3 types of Hooks:
     - @Before @After - > each scenario
     - @BeforeStep @AfterStep -> each step of scenario
     - @BeforeAll @AfterAll -> all scenarios



Reporting in Cucumber Framework

- Cucumber comes with its own built-in HTML report. To enable it, we need to add the HTML plugin with the path to the file in @CucumberOptions
   e.g    plugin = {"html:target/basic-report/report.html"}
- We can also enable the web based version of the same report  by adding publish=true option

How did you implement taking a screenshot on failure in Cucumber?
- In @After hook, we used Scenario class and checked if scenario is failed,
  and took a screenshot with Selenium and attached the screenshot file with Scenario class's attach method.
  e.g.:
   if(scenario.isFailed()){
              scenario.attach(((TakesScreenshot) Driver.getDriver()).getScreenshotAs(OutputType.BYTES), "image/png", "failed");
          }

Pretty plugin adds more detailed step description and logs on the console and makes debugging easier. To enable it:
    plugin = {"pretty"};

Step Notifications option adds detailed step status on the junit runner report to see a detailed overview of each step's pass/fail status

Run Cucumber Tests through command line:

- Configure Maven Surefire plugin in pom.xml to indicate the runner class:
   <build>
           <pluginManagement>
               <plugins>
                   <plugin>
                       <groupId>org.apache.maven.plugins</groupId>
                       <artifactId>maven-surefire-plugin</artifactId>
                       <version>3.2.5</version>
                       <configuration>
                           <includes>CucumberRunner.java</includes>
                       </configuration>
                   </plugin>
               </plugins>
           </pluginManagement>
       </build>

- Run tests with mvn test command.

How to run scenarios with specific tag/s through CMD in Cucumber?

mvn test -D cucumber.filter.tags="@positive"
mvn test -D cucumber.filter.tags="@positive and @smoke"
mvn test -D cucumber.filter.tags="@positive or @smoke"

When you pass the tags through CMD with -D cucumber.filter.tags, it will override the Runner class's tags.

Cucumber parametrized step enables the step to be used multiple times with different sets of data and prevents multiple step snippet generation

  Cucumber automatically converts matching types (String, int,double) from scenario step into corresponding parameter({string},{int},{double}) and adds it to a snippet method as a parameter:
  Ex:
      Scenario Step:           Given I have 5 pounds of cucumbers of type "Cuke" that cost me 5.99 dollars

      Generated snippet:        @Given("I have {int} pounds of cucumbers of type {string} that cost me {double} dollars")
                                public void i_have_pounds_of_cucumbers_of_type_that_cost_me_dollars(Integer int1, String string, Double double1) {

                                }

 If you need to specify information in a scenario that won't fit on a single line, you can use a DocString. (""" """)
       When you use a doctring make sure to put each triple quote on its own line.
       Ex: Scenario: Example scenario for Database
           When I send the following query
             """
                select first_name,last_name,email,address,district,city,country from customer
                join address
                on customer.address_id = address.address_id
                join city
                on address.city_id  = city.city_id
                join country
                on city.country_id = country.country_id;
              """

   Cucumber Data Table - a cucumber feature that enables table-style data/collection to be passed from a SINGLE step of a Cucumber scenario into the step definition method
                Example:
                Given the user is on the homepage of the music streaming app
                    When the user clicks on the “Browse” link in the sidebar
                    Then the following albums should be displayed
                      | Cruel Summer        |
                      | Fenix               |
                      | Werk                |
                      | Marisa              |
                      | Escape              |
                      | Ultimatum           |
                      | Oscillation         |
                      | Clouds              |
                      | I Am...Sasha Fierce |

        The DataTable is added to the cucumber step definition method as a parameter, we simply need to replace it with corresponding Java data structure for automatic transformation.
        The allowed types are List<E>, List<List<E>>, List<Map<K,V>>, Map<K,V>  Map<K, List<V>> where E,K,V must be a String, Integer, Float, Double, Byte, Short, Long.
        When Cucumber converts the DataTable into corresponding Java data structures (List, Map), it creates an unmodifiable version of these data structures. If you need to modify, you need to convert into a modifiable type.


What is the difference between Cucumber Data Table and Scenario Outline’s Examples table?

SCOPE: Data Table belongs to a single step of a scenario whereas Examples table belongs to the entire Scenario Outline.
USAGE: We use Data Table when we want to pass table-style data (multiple sets of data) into a single step, in other words instead of passing large number of parameters separately we can pass them as single data structure like List, Map, etc
       We use Examples table with Scenario Outline when we want to run the same scenario multiple times with different input, .i.e implement data-driven testing


What are some common Cucumber exceptions?

UndefinedStepException -  when a scenario step does not have matching step definition method
PendingException - default exception that is added to each step definition snippet to mark that step as pending implementation
DuplicateStepDefinitionException - happens when there are more than one step definitions with the exactly matching text
AmbiguousStepDefinitionsException - this happens when one step has more than one matching step definitions due to parameters
                                     {string} and {word} or {int} and {long} or {float} and {double}



 Cucumber comes with built-in Junit 4 by default and it does not have soft assertions.
 Hence we can use AssertJ library to implement soft assertions:
                   <dependency>
                       <groupId>org.assertj</groupId>
                       <artifactId>assertj-core</artifactId>
                       <version>3.25.3</version>
                       <scope>test</scope>
                   </dependency>
            Ex:
                 SoftAssertions softAssertions = new SoftAssertions();
                 softAssertions.assertThat(“actual”).isEqualTo(“expected”);
                 softAssertions.assertThat(“actual2”).isEqualTo(“expected2");
                 softAssertions.assertThat(“actual3”).isEqualTo(“expected3");
                 softAssertions.assertAll();


Parallel and cross-browser tests can be implemented in following ways:

1. Selenium Grid: server that automatically runs your tests in distributed mode on multiple browsers,operating systems, platforms
   Requires complex installation and configuration.
   I used Selenium Grid by sending the framework tests to a remote server url using RemoteWebDriver.
2. Using third-party cloud providers such as SauceLabs, BrowserStack.
   Requires subscription and costs money.
3. Implement running cross-browser and parallel tests natively in your framework.
   Requires powerful server to run the tests.

How to implement parallel tests in Cucumber?

We can enable parallel test in Cucumber natively with JUnit 4.
But we need to remember that with this option you can run only FEATURES in parallel.
If there is a need for running SCENARIOS in parallel, you can incorporate TestNG , but that requires extra configuration and setup.

Steps to implement running parallel Features in Cucumber with Junit:
1. Determine the scope of the feature files that you want to run in parallel in your runner class
   features = “src/test/resources”
  Optionally create a separate folder for feature files that you want to run in parallel and indicate that path
   features = “src/test/resources/parallel”
2.Add these 2 options under the <configuration> tag of Maven Surefire plugin:
                       <parallel>methods</parallel>
                       <useUnlimitedThreads>true</useUnlimitedThreads>
3.If you need to limit the number of threads:
         <threadCount>3</threadCount>
         <perCoreThreadCount>false</perCoreThreadCount>
4. You need to run tests in terminal for parallelism to be enabled since we are using surefire plugin to configure parallelism


Tell me about your framework?

General description -> components -> architecture -> more details (packages, classes)

Sample:
It is a Cucumber BDD test automation framework that allows us to write test cases in Gherkin format
  as Cucumber scenarios which is understandable to all participants.
  The framework's tech stack includes Java, Cucumber, Gherkin, JUnit, Selenium, JDBC, RestAssured, Maven, Faker, Lombok, AssertJ.
  My framework is built with using Page Object Model design pattern for easy maintenance and scalability.
  Besides, I also used Page Factory pattern for my page classes and Singleton pattern for my Driver class.
  My framework structure consists of packages for page classes, runner classes, step definition classes and hooks, utilities and features files.
  In my framework the cucumber feature files are connected to the step definition classes through a runner class where all test run configuration is added.

Cucumber BDD Framework components:
    Java - programming language to write code
    Selenium - to automate UI scenarios
    Junit - organize, configure, and execute tests.
    Maven - define the project structure, manage dependencies, run tests through command line via surefire plugin
    Faker - generate mock data for data driven testing
    Lombok - generate getter and setters automatically for page classes
    AssertJ - enable soft assertions since Junit does not offer them
    .gitignore file - to exclude non-project related files from being version controlled (tracked and pushed to GitHub)
    config.properties file - to store project’s global variables such as env variables, usernames, passwords, paths, etc.
    Utility Classes - classes that support our automated tests
    Reports - are implemented with Cucumber’s own built in HTML report

Architecture:
       -Design patterns used: Page Object Model and Page Factory, Singleton
       -OOP Principles used:
           - Encapsulation - I used it my page classes by making webelements private and provide public getters
           - Inheritance - I used it in my page classes by creating a parent class and adding all common webelements there and extending subclasses from that super class
           - I haven’t implemented Abstraction or Polymorphism in any of my code since I had no need for them. But I can give you examples of them in my framework code.
             Polymorphism ->  WebDriver driver = new ChromeDriver()
             Abstraction -> WebDriver, WebElement, Alert, JavaScriptExecutor, TakesScreenshot

Types of tests the framework supports:
    Functional,
    Smoke,
    Regression,
    Integration,
    UI, API, DB
    Cross Browser,
    Headless,
    Parallel,
    Data-Driven tests
    End-to-end tests